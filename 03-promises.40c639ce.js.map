{"mappings":"qhBA+BA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EAEFF,EAAQ,C,SAAEH,E,MAAUC,IAGpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAiCGQ,SAASC,cAAc,QAE/BC,iBAAiB,UA/BzB,SAAsBC,GACpBA,EAAIC,iBACJ,MACEC,UAAYb,MAAAc,EAAKC,KAAEA,EAAIC,OAAEA,IACvBL,EAAIM,cAER,IAAIC,EAAWC,OAAOL,EAAMM,OACxBC,EAAUF,OAAOJ,EAAKK,OACtBE,EAAYH,OAAOH,EAAOI,OAE9B,IAAK,IAAIG,EAAI,EAAGA,GAAKD,EAAWC,GAAK,EACnCzB,EAAcyB,EAAGL,GACdM,MAAK,EAACzB,SAAEA,EAAQC,MAAEA,MACjByB,EAAA7B,GAAS8B,OAAOC,QACd,uBAAqB5B,QAAiBC,OAExC4B,QAAQC,IAAI,uBAAqB9B,QAAiBC,MAAU,IAE7D8B,OAAM,EAAC/B,SAAEA,EAAQC,MAAEA,MAClByB,EAAA7B,GAAS8B,OAAOK,QACd,sBAAoBhC,QAAiBC,OAEvC4B,QAAQC,IAAI,sBAAoB9B,QAAeC,MAAU,IAG7DkB,GAAYG,C","sources":["src/js/03-promises.js"],"sourcesContent":["// В HTML есть разметка формы, в поля которой пользователь будет вводить первую задержку в миллисекундах,\n//   шаг увеличения задержки для каждого промиса после первого и количество промисов которое необходимо создать.\n\n// Напиши скрипт, который при сабмите формы вызывает функцию createPromise(position, delay) столько раз, сколько ввели в поле amount.\n// При каждом вызове передай ей номер создаваемого промиса(position) и задержку учитывая введенную пользователем первую задержку(delay) и шаг(step).\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n// Дополни код функции createPromise так, чтобы она возвращала один промис, который выполянется или отклоняется через delay времени.\n// Значением промиса должен быть объект, в котором будут свойства position и delay со значениями одноименных параметров.Используй начальный код функции для выбора того,\n// что нужно сделать с промисом - выполнить или отклонить.\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n// Библиотека уведомлений\n// ВНИМАНИЕ\n// Этот функционал не обязателен при сдаче задания, но будет хорошей дополнительной практикой.\n// Для отображения уведомлений пользователю вместо console.log() используй библиотеку notiflix.\nimport Notiflix from 'notiflix';\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n  const {\n    elements: { delay, step, amount },\n  } = evt.currentTarget;\n\n  let delayNum = Number(delay.value);\n  let stepNum = Number(step.value);\n  let amountNum = Number(amount.value);\n\n  for (let i = 1; i <= amountNum; i += 1) {\n    createPromise(i, delayNum)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    delayNum += stepNum;\n  }\n}\n\nconst formREF = document.querySelector('form');\n\nformREF.addEventListener('submit', onFormSubmit);\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","evt","preventDefault","elements","delay1","step","amount","currentTarget","delayNum","Number","value","stepNum","amountNum","i","then","$parcel$interopDefault","Notify","success","console","log","catch","failure"],"version":3,"file":"03-promises.40c639ce.js.map"}